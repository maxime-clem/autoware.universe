<launch>
  <!-- parking scenario -->
  <group if="$(var launch_parking_module)">
    <push-ros-namespace namespace="parking"/>

    <node_container pkg="rclcpp_components" exec="$(var container_type)" name="parking_container" namespace="" output="screen">
      <composable_node pkg="costmap_generator" plugin="CostmapGenerator" name="costmap_generator" namespace="">
        <!-- topic remap -->
        <remap from="~/input/objects" to="/perception/object_recognition/objects"/>
        <remap from="~/input/points_no_ground" to="/perception/obstacle_segmentation/pointcloud"/>
        <remap from="~/input/vector_map" to="/map/vector_map"/>
        <remap from="~/input/scenario" to="/planning/scenario_planning/scenario"/>
        <remap from="~/output/grid_map" to="costmap_generator/grid_map"/>
        <remap from="~/output/occupancy_grid" to="costmap_generator/occupancy_grid"/>
        <!-- params -->
        <param from="$(var vehicle_param_file)"/>
        <param from="$(var costmap_generator_param_path)"/>
        <extra_arg name="use_intra_process_comms" value="false"/>
      </composable_node>

      <composable_node pkg="freespace_planner" plugin="freespace_planner::FreespacePlannerNode" name="freespace_planner" namespace="">
        <!-- topic remap -->
        <remap from="~/input/route" to="/planning/mission_planning/route"/>
        <remap from="~/input/scenario" to="/planning/scenario_planning/scenario"/>
        <remap from="~/input/occupancy_grid" to="costmap_generator/occupancy_grid"/>
        <remap from="~/input/odometry" to="/localization/kinematic_state"/>
        <remap from="~/output/trajectory" to="/planning/scenario_planning/parking/trajectory"/>
        <remap from="is_completed" to="/planning/scenario_planning/parking/is_completed"/>
        <!-- params -->
        <param from="$(var vehicle_param_file)"/>
        <param from="$(var freespace_planner_param_path)"/>
        <extra_arg name="use_intra_process_comms" value="false"/>
      </composable_node>
      <composable_node pkg="glog_component" plugin="GlogComponent" name="glog_component" namespace=""/>
    </node_container>
  </group>

  <!-- auto parking module -->
  <group if="$(var launch_avp_module)">
    <push-ros-namespace namespace="avp"/>
    <node_container pkg="rclcpp_components" exec="component_container" name="auto_parking_container" namespace="">
      <composable_node pkg="auto_parking" plugin="auto_parking::AutoParkingNode" name="auto_parking" namespace="">
        <remap from="~/input/odometry" to="/localization/kinematic_state"/>
        <remap from="~/input/occupancy_grid" to="/planning/scenario_planning/parking/costmap_generator/occupancy_grid"/>
        <remap from="~/input/lanelet_map_bin" to="/map/vector_map"/>
        <remap from="~/input/engage" to="/api/autoware/get/engage"/>
        <remap from="~/service/engage" to="/api/autoware/set/engage"/>
        <remap from="~/output/fixed_goal" to="/planning/mission_planning/goal"/>
        <remap from="~/output/active_status" to="/planning/auto_parking/status"/>
        <remap from="~/service/set_active" to="/planning/auto_parking/set_status"/>
        <!-- params -->
        <param from="$(var vehicle_param_file)"/>
        <param from="$(var auto_parking_param_path)"/>
      </composable_node>
      <composable_node pkg="glog_component" plugin="GlogComponent" name="glog_component" namespace=""/>
    </node_container>
  </group>
</launch>
