<launch>
  <arg name="interface_input_topic" default="/planning/scenario_planning/lane_driving/behavior_planning/path"/>
  <arg name="interface_output_topic" default="/planning/scenario_planning/lane_driving/trajectory"/>

  <arg name="launch_dynamic_obstacle_stop_module" default="true"/>
  <arg name="launch_out_of_lane_module" default="true"/>
  <arg name="launch_obstacle_velocity_limiter_module" default="true"/>
  <arg name="launch_module_list_end" default="&quot;&quot;]"/>

  <!-- assemble launch config for motion velocity planner -->
  <arg name="motion_velocity_planner_launch_modules" default="["/>
  <let
    name="motion_velocity_planner_launch_modules"
    value="$(eval &quot;'$(var motion_velocity_planner_launch_modules)' + 'autoware::motion_velocity_planner::OutOfLaneModule, '&quot;)"
    if="$(var launch_out_of_lane_module)"
  />
  <let
    name="motion_velocity_planner_launch_modules"
    value="$(eval &quot;'$(var motion_velocity_planner_launch_modules)' + 'autoware::motion_velocity_planner::ObstacleVelocityLimiterModule, '&quot;)"
    if="$(var launch_obstacle_velocity_limiter_module)"
  />
  <let
    name="motion_velocity_planner_launch_modules"
    value="$(eval &quot;'$(var motion_velocity_planner_launch_modules)' + 'autoware::motion_velocity_planner::DynamicObstacleStopModule, '&quot;)"
    if="$(var launch_dynamic_obstacle_stop_module)"
  />
  <let name="motion_velocity_planner_launch_modules" value="$(eval &quot;'$(var motion_velocity_planner_launch_modules)' + '$(var launch_module_list_end)'&quot;)"/>

  <node_container pkg="rclcpp_components" exec="$(var container_type)" name="motion_planning_container" namespace="" args="" output="screen">
    <composable_node pkg="glog_component" plugin="GlogComponent" name="glog_component" namespace=""/>
  </node_container>

  <!-- path smoothing -->
  <group>
    <group if="$(eval &quot;'$(var motion_path_smoother_type)' == 'elastic_band'&quot;)">
      <load_composable_node target="/planning/scenario_planning/lane_driving/motion_planning/motion_planning_container">
        <composable_node pkg="autoware_path_smoother" plugin="autoware::path_smoother::ElasticBandSmoother" name="elastic_band_smoother" namespace="">
          <!-- topic remap -->
          <remap from="~/input/path" to="$(var interface_input_topic)"/>
          <remap from="~/input/odometry" to="/localization/kinematic_state"/>
          <remap from="~/output/path" to="path_smoother/path"/>
          <!-- params -->
          <param from="$(var common_param_path)"/>
          <param from="$(var vehicle_param_file)"/>
          <param from="$(var nearest_search_param_path)"/>
          <param from="$(var elastic_band_smoother_param_path)"/>
          <!-- composable node config -->
          <extra_arg name="use_intra_process_comms" value="false"/>
        </composable_node>
      </load_composable_node>
    </group>

    <group if="$(eval &quot;'$(var motion_path_smoother_type)' == 'none'&quot;)">
      <load_composable_node target="/planning/scenario_planning/lane_driving/motion_planning/motion_planning_container">
        <composable_node pkg="topic_tools" plugin="topic_tools::RelayNode" name="path_smoother_relay" namespace="">
          <!-- params -->
          <param name="input_topic" value="$(var interface_input_topic)"/>
          <param name="output_topic" value="path_smoother/path"/>
          <param name="type" value="autoware_planning_msgs/msg/Trajectory"/>
          <!-- composable node config -->
          <extra_arg name="use_intra_process_comms" value="false"/>
        </composable_node>
      </load_composable_node>
    </group>
  </group>

  <!-- generate kinematic-feasible path -->
  <group>
    <group if="$(eval &quot;'$(var motion_path_planner_type)' == 'path_optimizer'&quot;)">
      <load_composable_node target="/planning/scenario_planning/lane_driving/motion_planning/motion_planning_container">
        <composable_node pkg="autoware_path_optimizer" plugin="autoware::path_optimizer::PathOptimizer" name="path_optimizer" namespace="">
          <!-- topic remap -->
          <remap from="~/input/path" to="path_smoother/path"/>
          <remap from="~/input/odometry" to="/localization/kinematic_state"/>
          <remap from="~/output/path" to="/planning/scenario_planning/lane_driving/trajectory"/>
          <!-- params -->
          <param from="$(var common_param_path)"/>
          <param from="$(var vehicle_param_file)"/>
          <param from="$(var nearest_search_param_path)"/>
          <param from="$(var path_optimizer_param_path)"/>
          <!-- composable node config -->
          <extra_arg name="use_intra_process_comms" value="false"/>
        </composable_node>
      </load_composable_node>
    </group>

    <group if="$(eval &quot;'$(var motion_path_planner_type)' == 'path_sampler'&quot;)">
      <load_composable_node target="/planning/scenario_planning/lane_driving/motion_planning/motion_planning_container">
        <composable_node pkg="autoware_path_sampler" plugin="autoware::path_sampler::PathSampler" name="path_sampler" namespace="">
          <!-- topic remap -->
          <remap from="~/input/path" to="path_smoother/path"/>
          <remap from="~/input/odometry" to="/localization/kinematic_state"/>
          <remap from="~/output/path" to="/planning/scenario_planning/lane_driving/trajectory"/>
          <!-- params -->
          <param from="$(var common_param_path)"/>
          <param from="$(var vehicle_param_file)"/>
          <param from="$(var nearest_search_param_path)"/>
          <param from="$(var path_sampler_param_path)"/>
          <!-- composable node config -->
          <extra_arg name="use_intra_process_comms" value="false"/>
        </composable_node>
      </load_composable_node>
    </group>

    <group if="$(eval &quot;'$(var motion_path_planner_type)' == 'none'&quot;)">
      <load_composable_node target="/planning/scenario_planning/lane_driving/motion_planning/motion_planning_container">
        <composable_node pkg="autoware_planning_topic_converter" plugin="autoware::planning_topic_converter::PathToTrajectory" name="path_to_trajectory_converter" namespace="">
          <!-- params -->
          <param name="input_topic" value="path_smoother/path"/>
          <param name="output_topic" value="/planning/scenario_planning/lane_driving/trajectory"/>
          <!-- composable node config -->
          <extra_arg name="use_intra_process_comms" value="false"/>
        </composable_node>
      </load_composable_node>
    </group>
  </group>
</launch>
